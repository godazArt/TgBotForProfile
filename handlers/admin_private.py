from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, CommandStart, or_f
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import orm_add_product, orm_add_categories, orm_delete_product, orm_get_categories_names, orm_get_category_by_id, orm_get_category_id, orm_get_products, orm_get_product, orm_update_prices, orm_update_product, orm_get_prices, orm_add_prices

from filters.chat_types import ChatTypeFilter, IsAdmin
from keyboards.inline import get_callback_btns
from keyboards.reply import keyboardBuilder, del_kb
from common.bot_cmds_list import categories


admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


ADMIN_START_KB = keyboardBuilder(
                             "–ö–∞—Ç–∞–ª–æ–≥ üìñ",
                             "–ö–æ—Ä–∑–∏–Ω–∞ üõí",
                             "–ó–∞–∫–∞–∑—ã üì¶",
                             "–û –º–∞–≥–∞–∑–∏–Ω–µ üìã",
                             "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üìû",
                             "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞üçè",
                             placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª",
                             sizes=(3,2)
                         )

ADMIN_KB = keyboardBuilder(
    "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
    "–í—Å–µ —Ç–æ–≤–∞—Ä—ã",
    "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(2, 1),
)

class AddProduct(StatesGroup):
    category = State()
    name = State()
    description = State()
    price = State()
    image = State()
    
    price_list = []
    item_for_change = None

    texts = {
            'AddProduct:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:',
            'AddProduct:description': '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:',
            'AddProduct:price': '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ:',
            'AddProduct:image': '–≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É...',
            }


@admin_router.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω", reply_markup=ADMIN_START_KB)

@admin_router.message(or_f(Command('menu'), F.text.lower().contains('–º–µ–Ω—é') ))
async def menu(message: types.Message, state: FSMContext):
    await message.answer("–ú–µ–Ω—é:", reply_markup=ADMIN_START_KB)
    await state.clear()
    


@admin_router.message(or_f(Command("admin"), F.text == "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞üçè"))
async def add_product(message: types.Message):
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=ADMIN_KB)


@admin_router.message(F.text == "–í—Å–µ —Ç–æ–≤–∞—Ä—ã")
async def change_product(message: types.Message, session:AsyncSession):
    for item in await orm_get_products(session):
        price_str = "–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ :"            
        for price in await orm_get_prices(session, item.id):   
            price_str += f"\n–û—Ç {price.count} —à—Ç. –¶–µ–Ω–∞ - {round(price.price, 2)}—Ä—É–±."            
        await message.answer_photo(item.image, caption=f"<strong>Id —Ç–æ–≤–∞—Ä–∞: {item.id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {item.name}\n</strong>–¢–∏–ø: {await orm_get_category_by_id(session, item.category_id)}\n{item.description}\n<strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:\n{price_str}</strong>",
                                   reply_markup=get_callback_btns(btns={
                '–£–¥–∞–ª–∏—Ç—å':f'delete_{item.id}',
                '–ò–∑–º–µ–Ω–∏—Ç—å':f'change_{item.id}'
            }))
    await message.answer("–í–æ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã‚è´")
    


@admin_router.callback_query(F.data.startswith('delete_'))
async def delete_product(callback: types.CallbackQuery, session: AsyncSession):
    item_id = callback.data.replace("delete_","")    
    try:
        await orm_delete_product(session=session, item_id=int(item_id))

        await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
        await callback.message.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
        await callback.message.delete()
    except Exception as e:
        await callback.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –µ—ë", reply_markup=ADMIN_KB
        )
        await callback.message.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –µ—ë", reply_markup=ADMIN_KB
        )


@admin_router.callback_query(StateFilter(None),F.data.startswith('change_'))
async def update_product(callback: types.CallbackQuery,state:FSMContext, session: AsyncSession):
    item_id = callback.data.replace("change_","")
    
    try:
        item_for_change = await orm_get_product(session, int(item_id))
        AddProduct.item_for_change = item_for_change
        await callback.answer()
        await callback.message.answer("–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '.'.\n–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞", 
                                      reply_markup=keyboardBuilder(*categories, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", sizes=(2,)))
        await state.set_state(AddProduct.type)
    except Exception as e:
        await callback.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –µ—ë", reply_markup=ADMIN_KB
        )
        await callback.message.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –µ—ë", reply_markup=ADMIN_KB
        )


@admin_router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product(message: types.Message, state: FSMContext, session: AsyncSession):
    orm_get_categories_names(session)
    await message.answer("–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞', a –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É '–Ω–∞–∑–∞–¥'")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π", reply_markup=keyboardBuilder(*(await orm_get_categories_names(session)),
                             placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π",
                             sizes=(4,)))
    await state.set_state(AddProduct.category)



@admin_router.message(StateFilter('*'),Command("–æ—Ç–º–µ–Ω–∞"))
@admin_router.message(StateFilter('*'),F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    cur_state = await state.get_state()

    if cur_state is None:
         return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ADMIN_KB)

@admin_router.message(StateFilter('*'), Command("–Ω–∞–∑–∞–¥"))
@admin_router.message(StateFilter('*'), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_handler(message: types.Message, state: FSMContext) -> None:
    cur_state = await state.get_state()
    if cur_state == AddProduct.name:
         await message.answer(f"–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'")
         return

    previous = None
    for step in AddProduct.__all_states__:
        if step.state == cur_state:
            await state.set_state(previous)
            await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É\n{AddProduct.texts[previous.state]}")
            return
        previous = step



@admin_router.message(AddProduct.category, or_f(F.text, F.text == '.'))
async def add_type(message: types.Message, state: FSMContext, session:AsyncSession):
    if message.text == ".":
        await state.update_data(category=AddProduct.item_for_change.category_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",reply_markup=del_kb)
        await state.set_state(AddProduct.name)
    else:
        if(message.text not in await orm_get_categories_names(session)):
            await orm_add_categories(session=session, categories=message.text)
        await state.update_data(category=await orm_get_category_id(session, message.text))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",reply_markup=del_kb)
        await state.set_state(AddProduct.name)

@admin_router.message(AddProduct.category)
async def add_type(message: types.Message, state: FSMContext, session:AsyncSession):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞",
                        reply_markup=keyboardBuilder(*(await orm_get_categories_names(session)),
                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                        sizes=(4,)))


@admin_router.message(AddProduct.name, or_f(F.text, F.text == '.'))
async def add_name(message: types.Message, state: FSMContext):
    if message.text == ".":
        await state.update_data(name=AddProduct.item_for_change.name)
    else:
        await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.description)

@admin_router.message(AddProduct.name)
async def add_name(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")


@admin_router.message(AddProduct.description, or_f(F.text, F.text == "."))
async def add_description(message: types.Message, state: FSMContext):
    if message.text == ".":
        await state.update_data(description=AddProduct.item_for_change.description)
    else:
        await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞.\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: '5-100' - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 5 —à—Ç. –∏ –±–æ–ª—å—à–µ —Ü–µ–Ω–∞ –∑–∞ –µ–¥. —Ç–æ–≤–∞—Ä–∞ 100 —Ä—É–±–ª–µ–π. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤–≤–æ–¥ —Ü–µ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—Å–µ'.")
    await state.set_state(AddProduct.price)

@admin_router.message(AddProduct.description)
async def add_description(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

###–î–û–î–ï–õ–ê–¢–¨!!!!
@admin_router.message(AddProduct.price,or_f(F.text, F.text == "."))
async def add_price(message: types.Message, state: FSMContext, session:AsyncSession):
    if message.text == ".":
        for price in await orm_get_prices(session, AddProduct.item_for_change.id):
            AddProduct.price_list.append(f"{price.count}-{price.price}")
        await state.update_data(price=AddProduct.price_list)
        await state.set_state(AddProduct.image)
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

    elif  message.text.lower() == "–≤—Å–µ":
        await state.update_data(price=AddProduct.price_list)
        await state.set_state(AddProduct.image)
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

    else:
        try:
            temp = message.text.split('-')
            int(temp[0])
            float(temp[-1])
            AddProduct.price_list.append(message.text)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ü–µ–Ω—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—Å–µ'")
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã.\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: '5-100' - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 5 —à—Ç. –∏ –±–æ–ª—å—à–µ —Ü–µ–Ω–∞ –∑–∞ –µ–¥. —Ç–æ–≤–∞—Ä–∞ 100 —Ä—É–±–ª–µ–π. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤–≤–æ–¥ —Ü–µ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—Å–µ'.")
            return     
    

@admin_router.message(AddProduct.price)
async def add_price(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞")


@admin_router.message(AddProduct.image,or_f(F.photo, F.text == "."))
async def add_image(message: types.Message, state: FSMContext, session:AsyncSession):
    if message.text and message.text == ".":
        await state.update_data(image=AddProduct.item_for_change.image)
    else:
        await state.update_data(image=message.photo[-1].file_id)
    data = await state.get_data()
    try:
        if AddProduct.item_for_change:
            await orm_update_product(session, AddProduct.item_for_change.id, data)
            await orm_update_prices(session, AddProduct.item_for_change.id, data)
        else:
            id = await orm_add_product(session, data)
            await orm_add_prices(session, id, data)
            
        await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω/–∏–∑–º–µ–Ω–µ–Ω", reply_markup=ADMIN_KB)        

    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –µ—ë", reply_markup=ADMIN_KB
        )
    await state.clear()
    AddProduct.item_for_change = None
    AddProduct.price_list = []

@admin_router.message(AddProduct.image)
async def add_image(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from sqlalchemy.ext.asyncio import AsyncSession

from filters.chat_types import ChatTypeFilter
from keyboards import reply
from database.orm_query import orm_add_to_cart, orm_add_user, orm_get_categories_names, orm_get_category_by_id, orm_get_count_in_cart, orm_get_prices, orm_get_product, orm_get_products, orm_get_products_by_type, orm_get_user_carts, orm_reduce_product_in_cart
from keyboards.inline import get_callback_btns
from common import bot_cmds_list


user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))


START_KB = reply.keyboardBuilder(
                             "–ö–∞—Ç–∞–ª–æ–≥ üìñ",
                             "–ö–æ—Ä–∑–∏–Ω–∞ üõí",
                             "–ó–∞–∫–∞–∑—ã üì¶",
                             "–û –º–∞–≥–∞–∑–∏–Ω–µ üìã",
                             "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üìû",
                             placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª",
                             sizes=(3,)
                         )

class Catalog(StatesGroup):
    category = State()

class Order(StatesGroup):
    delivery_type = State()
    address = State()
    paymentConfirm = State()

@user_private_router.message(StateFilter('*'), Command("menu"))
@user_private_router.message(StateFilter('*'), F.text.lower().contains('–º–µ–Ω—é'))
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–ú–µ–Ω—é:", reply_markup=START_KB)

@user_private_router.message(CommandStart())
async def start_handler(message: types.Message, session:AsyncSession, state: FSMContext):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω", 
                         reply_markup=START_KB)
    await state.clear()
    await orm_add_user(session=session, user_id=message.from_user.id)

    


@user_private_router.message( or_f(Command('catalog'), F.text== "–ö–∞—Ç–∞–ª–æ–≥ üìñ"))
async def catalog(message: types.Message, state: FSMContext, session:AsyncSession):
    await message.answer("–ö–∞—Ç–∞–ª–æ–≥:", reply_markup=reply.keyboardBuilder(*(await orm_get_categories_names(session)),"–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                             placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                             sizes=(4,)))  
    await state.set_state(Catalog.category)
    print(bot_cmds_list.categories,end='\n\n\n\n\n')
    bot_cmds_list.categories = await orm_get_categories_names(session)
    print(type(bot_cmds_list.categories),end='\n\n\n\n\n')


@user_private_router.message(Catalog.category, F.text)
async def see_catalog(message: types.Message, state: FSMContext, session:AsyncSession):    
    bot_cmds_list.categories
    if(message.text in bot_cmds_list.categories):
        for item in await orm_get_products_by_type(session, message.text):
            price_str = "–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç:"            
            for price in await orm_get_prices(session, item.id):   
                price_str += f"\n–û—Ç {price.count} —à—Ç. –¶–µ–Ω–∞ - {round(price.price, 2)}—Ä—É–±."
            await message.answer_photo(item.image, caption=f"<strong>Id —Ç–æ–≤–∞—Ä–∞: {item.id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {item.name}\n</strong>–¢–∏–ø: {await orm_get_category_by_id(session, item.category_id)}\n{item.description}\n<strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:\n{price_str}</strong>",
                                   reply_markup=get_callback_btns(btns={
                '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É 1 —à—Ç':f'add_cart_{item.id}-1',
                '–î–æ–±–∞–≤–∏—Ç—å 5 —à—Ç':f'add_cart_{item.id}-5',
                '–î–æ–±–∞–≤–∏—Ç—å 10 —à—Ç':f'add_cart_{item.id}-10',
                '–î–æ–±–∞–≤–∏—Ç—å 25 —à—Ç':f'add_cart_{item.id}-25'                
            },sizes=(1,3)))
        await message.answer("–í–æ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏‚è´",reply_markup=reply.keyboardBuilder(*(await orm_get_categories_names(session)),"–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                             placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                             sizes=(4,)))  
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=reply.keyboardBuilder(*(await orm_get_categories_names(session)),"–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                             placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                             sizes=(4,)))  


@user_private_router.message(Catalog.category)
async def see_catalog(message: types.Message, session:AsyncSession):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞",
                        reply_markup=reply.keyboardBuilder(*(await orm_get_categories_names(session)),
                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                        sizes=(4,)))


@user_private_router.callback_query(F.data.startswith('add_cart_'))
async def add_product_to_cart(callback: types.CallbackQuery, session: AsyncSession):
    item_id = callback.data.replace("add_cart_","")
    print(f"item_id = {item_id}",end='\n\n\n\n')
    try:
        item_id, count = item_id.split('-')
        print(f"item_id = {item_id}, count = {count}",end='\n\n\n\n')
        await orm_add_to_cart(session=session, item_id=int(item_id), count=int(count), user_id=callback.from_user.id)

        await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")
        await callback.message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")
    except Exception as e:
        await callback.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –µ—ë", reply_markup=reply.keyboardBuilder(*(await orm_get_categories_names(session)),"–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                             placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                             sizes=(4,)))
        
        await callback.message.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –µ—ë", reply_markup=reply.keyboardBuilder(*(await orm_get_categories_names(session)),"–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                             placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                             sizes=(4,)))
        
@user_private_router.callback_query(F.data.startswith('del_cart_'))
async def del_product_from_cart(callback: types.CallbackQuery, session: AsyncSession):
    item_id = callback.data.replace("del_cart_","")
    try:
        item_id, count = item_id.split('-')
        print(item_id, " item_id ", count, " count ",end='\n\n\n')
        logic = await orm_reduce_product_in_cart(session=session, product_id=int(item_id),count=int(count), user_id=callback.from_user.id)
        if logic:
            await callback.message.delete()
            await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            await callback.message.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        else:
            await callback.message.delete()
            await callback.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ —É–º–µ–Ω—å—à–µ–Ω–Ω–æ")    
###########
        
    except Exception as e:
        await callback.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –µ—ë", reply_markup=reply.keyboardBuilder("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        
        await callback.message.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –µ—ë", reply_markup=reply.keyboardBuilder("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))


@user_private_router.message(or_f(Command('orders'), F.text == "–ó–∞–∫–∞–∑—ã üì¶"))
async def order(message: types.Message):
    await message.answer("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=reply.keyboardBuilder(
                             "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é üìñ",
                             placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∑–∞–∫–∞–∑"
                         ),)
    
@user_private_router.message( F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def active_orders(message: types.Message, state: FSMContext):
    state.set_state(Order.delivery_type)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.", reply_markup=reply.keyboardBuilder(
                            "–°–î–≠–öüìó",
                            "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ü¶Ö",
                            "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é üìñ",
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∑–∞–∫–∞–∑"
                         ),)
    

@user_private_router.message(Order.delivery_type, F.text)
async def add_delivery(message: types.Message, state: FSMContext):
    
    await state.update_data(delivety_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏(–§–∞–º–∏–ª–∏—è, –ò–º—è, –û—Ç—á–µ—Å—Ç–≤–æ, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏)")
    await state.set_state(Order.address)

@user_private_router.message(Order.delivery_type)
async def add_delivery(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏(–§–∞–º–∏–ª–∏—è, –ò–º—è, –û—Ç—á–µ—Å—Ç–≤–æ, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏)")


@user_private_router.message(Order.address, F.text)#F.photo
async def add_addres(message: types.Message, state: FSMContext):
    
    await state.update_data(addres=message.text)
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ {'–∑–∞–≥–ª—É—à–∫–∞ —Ä—É–±.'} –Ω–∞ –Ω–æ–º–µ—Ä {'+79188050062'} –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç")
    await state.set_state(Order.paymentConfirm)

@user_private_router.message(Order.address)
async def add_addres(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –æ–ø–ª–∞—Ç—É")

@user_private_router.message(Order.paymentConfirm,or_f(F.photo, F.text == "."))
async def add_image(message: types.Message, state: FSMContext, session:AsyncSession):
    
    await state.update_data(image=message.photo[-1].file_id)
    data = await state.get_data()
    try:
        id = await orm_add_product(session, data)
        await orm_add_prices(session, id, data)            
        await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω/–∏–∑–º–µ–Ω–µ–Ω", reply_markup=START_KB)        

    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞: \n{str(e)}\n –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –µ—ë", reply_markup=reply.keyboardBuilder(
                            "–°–î–≠–öüìó",
                            "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ü¶Ö",
                            "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é üìñ",
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∑–∞–∫–∞–∑"
                         ),)
    await state.clear()

@user_private_router.message(Order.paymentConfirm)
async def add_image(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


@user_private_router.message(or_f(Command('cart'), F.text == "–ö–æ—Ä–∑–∏–Ω–∞ üõí"))
async def cart(message: types.Message, session: AsyncSession):
    items = await orm_get_user_carts(session, message.from_user.id)
    for item in items:
            piece = await orm_get_product(session,item.item_id)
            if(item.price == -1):
                price = "–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑."
            else:
                price = f'{round(item.price,2)} —Ä—É–±.'
            await message.answer_photo(piece.image, caption=f"<strong>–ù–∞–∑–≤–∞–Ω–∏–µ: {piece.name}\n</strong>–¢–∏–ø: {await orm_get_category_by_id(session, piece.category_id)}\n{piece.description}\n<strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.count} —à—Ç.\n–°—Ç–æ–∏–º–æ—Å—Ç—å:\n{price} </strong>",
                                   reply_markup=get_callback_btns(btns={
                '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã 1 —à—Ç':f'del_cart_{item.item_id}-1',
                '–£–¥–∞–ª–∏—Ç—å 5 —à—Ç':f'del_cart_{item.item_id}-5',
                '–£–¥–∞–ª–∏—Ç—å 10 —à—Ç':f'del_cart_{item.item_id}-10',
                '–£–¥–∞–ª–∏—Ç—å 25 —à—Ç':f'del_cart_{item.item_id}-25'                
            },sizes=(1,3)))

    await message.answer("–¢–æ–≤–∞—Ä—ã –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ‚è´", reply_markup=reply.keyboardBuilder(
                            "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                            "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é üìñ",
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä",
                            sizes=(3,)
                         ),)

@user_private_router.message(or_f(Command('shipping'), F.text == "–î–æ—Å—Ç–∞–≤–∫–∞ üöö"))
async def shipping(message: types.Message):
    await message.answer("–î–æ—Å—Ç–∞–≤–∫–∞:", reply_markup=reply.keyboardBuilder(
                             "–°–∞–º–æ–≤—ã–≤–æ–∑ üë∑",
                             "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ üá∑üá∫",
                             "–°–î–≠–ö üöõ",
                             "BoxBerry üçá",
                             "–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞‚òéÔ∏è",
                             "–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏üìç",
                             "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é üìñ",
                             placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏",
                             request_contact=4,
                             request_location=5,
                             sizes=(2,)
                         ),)

@user_private_router.message(or_f(Command('about'), F.text == "–û –º–∞–≥–∞–∑–∏–Ω–µ üìã"))
async def about(message: types.Message):
    await message.answer("–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –¥–∞–≤–Ω–æ –∑–∞—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∞ —Å–µ–±—è –Ω–∞ —Ä—ã–Ω–∫–µ –∫–∞–∫ –æ–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.\n"
                         "–£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä, –ø—Ä–∏—è—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.", reply_markup=reply.keyboardBuilder(
                             "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é üìñ",
                         ),)

@user_private_router.message(or_f(Command('support'), F.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üìû"))
async def support(message: types.Message):
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:"
                         "Whatsup:\n"
                         "–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤ +7(011)456-25-97 \n"
                         "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞ +7(011)456-25-97 \n"
                         "–ú–∞–∫—Å–∏–º –°–∏–¥–æ—Ä–æ–≤ +7(011)456-25-97 \n")

    await message.answer("Telegram: \n"
                         "–ò–≥–æ—Ä—å –ú–æ—Ä–æ–∑–æ–≤ https://t.me/godazArt1", reply_markup=reply.keyboardBuilder(                             
                             "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏üì¢",
                             "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é üìñ",
                             placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
                             sizes=(1,)
                         ),)
